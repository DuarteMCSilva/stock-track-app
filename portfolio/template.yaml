AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: New transaction workflow
Globals:
  Function:
    Timeout: 15
Parameters:
  STAGE:
    Type: String
    Default: dev
  TransactionsDBTable:
    Type: String
    Default: TransactionsDB
  PortfolioDBTable:
    Type: String
    Default: PortfolioDB
Resources:
  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref STAGE
  PortfolioExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
  NewTransactionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt PortfolioExecutionRole.Arn
      Definition:
        Comment: New transaction workflow
        StartAt: Validate Transaction
        States:
          Validate Transaction:
            Comment: Check if the transaction is valid.
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: $
              FunctionName: !Sub ${InputValidationFunction}
            Next: Is Transaction Valid
          Is Transaction Valid:
            Type: Choice
            Choices:
              - Variable: $.Payload.valid
                BooleanEquals: true
                Next: Parallel States
            Default: FailState
          Parallel States:
            Type: Parallel
            Next: Is Transaction Possible
            Branches:
              - StartAt: Validate Possible Transaction
                States:
                  Validate Possible Transaction:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      Payload.$: $.Payload
                      FunctionName: !Sub ${CheckTransactionPossibleFunction}
                    End: true
              - StartAt: Request Payload Token
                States:
                  Request Payload Token:
                    Type: Pass
                    End: true
          Is Transaction Possible:
            Type: Choice
            Choices:
              - Variable: $[0].Payload.possible
                BooleanEquals: true
                Next: POST Transaction
            Default: FailState
          POST Transaction:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: $[1].Payload
              FunctionName: !Sub ${PostTransactionFunction}
            Next: Recalculate Prices
          Recalculate Prices:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: $.Payload
              FunctionName: !Sub ${RecalculatePricesFunction}
            Next: SuccessState
          SuccessState:
            Type: Succeed
          FailState:
            Type: Fail
  PostTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-postTransactionLambda
      Description: Submit a new transaction
      CodeUri: handler/
      Environment:
        Variables:
          DynamoTable: !Ref TransactionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
      Handler: app.postTransaction
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        PostTransaction:
          Type: Api
          Properties:
            Path: /transaction
            Method: POST
            RestApiId: !Ref MyApiGateway
  RecalculatePricesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-recalculatePricesLambda
      Description: Recalculates prices & dividends, in case the ticker exists in the portfolio.
      CodeUri: handler/
      Environment:
        Variables:
          DynamoTable: !Ref PortfolioTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PortfolioTable
      Handler: app.recalculatePricesHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
  InputValidationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-validateTransactionLambda
      Description: Parsing and Validation of transaction input.
      CodeUri: handler/
      Handler: app.validateTransaction
      Runtime: nodejs18.x
      Architectures:
        - x86_64
  CheckTransactionPossibleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-checkTransactionPossibleLambda
      Description: Check if there is enough balance or stocks in the porfolio to perform the transaction.
      CodeUri: handler/
      Handler: app.checkTransactionPossible
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DynamoTable: !Ref PortfolioTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PortfolioTable
  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TransactionsDBTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  PortfolioTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref PortfolioDBTable
      AttributeDefinitions:
        - AttributeName: ticker
          AttributeType: S
      KeySchema:
        - AttributeName: ticker
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
Outputs:
  MyApiGateway:
    Description: API Gateway endpoint URL for Prod stage for Feedback function
    Value: !Sub https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${STAGE}/transaction/
  StateMachine:
    Description: StateMachine ARN
    Value: !GetAtt NewTransactionStateMachine.Arn
  PostTransactionFunction:
    Description: POST Transaction Lambda Function ARN
    Value: !GetAtt PostTransactionFunction.Arn
  TransactionsTable:
    Description: TransactionsDBTable ARN
    Value: !GetAtt TransactionsTable.Arn